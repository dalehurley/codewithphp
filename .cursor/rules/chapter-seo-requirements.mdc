---
description: SEO requirements for tutorial chapters — meta tags, structured data, and social sharing optimization
---

# Chapter SEO Requirements

## Overview

Every tutorial chapter automatically receives comprehensive SEO optimization through VitePress `transformHead` hooks and structured data generation. This rule documents the required and optional frontmatter fields that enable SEO features.

## Required Frontmatter Fields (SEO-Enabled)

These fields are **mandatory** and directly used for SEO:

```yaml
---
title: "NN: Chapter Title"
description: "Single sentence describing what the reader will learn"
series: "php-basics" | "ai-ml-php-developers"
chapter: N
difficulty: "Beginner" | "Intermediate" | "Advanced"
---
```

### SEO Usage

- **`title`**: Used for `og:title`, `twitter:title`, and page `<title>`
- **`description`**: Used for meta description, `og:description`, `twitter:description`
- **`series`**: Determines social image path and schema.org Course relationship
- **`chapter`**: Used for social image naming and chapter identification
- **`difficulty`**: Included in LearningResource schema as `educationalLevel`

## Optional SEO Enhancement Fields

Add these fields to enhance SEO and structured data:

```yaml
---
# ... required fields above ...

# Optional SEO enhancements
keywords: ["PHP tutorial", "specific topic", "related term"]
author: "Code with PHP"
datePublished: "2024-10-28"
dateModified: "2024-10-28"
estimatedTime: "PT30M" # ISO 8601 duration format
teaches: ["Concept 1", "Concept 2", "Skill 3"]
---
```

### Field Specifications

**`keywords` (array)**

- List of relevant search terms
- Used for meta keywords tag
- Helps AI crawlers understand content
- Recommended: 3-7 keywords

**`author` (string)**

- Author/organization name
- Default: "Code with PHP"
- Used in article:author meta tag

**`datePublished` (ISO 8601 date)**

- Original publication date
- Format: `YYYY-MM-DD`
- Used in structured data

**`dateModified` (ISO 8601 date)**

- Last modification date
- Falls back to VitePress `lastUpdated` if not provided
- Used in article:modified_time meta tag

**`estimatedTime` (ISO 8601 duration)**

- How long to complete the chapter
- Format: `PT30M` (30 minutes), `PT1H30M` (1.5 hours)
- Used in LearningResource schema as `timeRequired`
- Appears in Prerequisites section

**`teaches` (array)**

- List of concepts/skills learned
- Used in LearningResource schema
- Helps search engines understand learning outcomes
- Recommended: 3-5 items

## Automatic SEO Features

These are generated **automatically** from the frontmatter:

### 1. Social Share Images

**Location**: `/docs/public/social/{series}-chapter-{nn}.jpg`

**Generated by**: `scripts/generate-social-images.js` (run **locally**, then commit)

**Specifications**:

- Size: 1200×630px
- Format: JPEG (quality 90)
- Overlay: Chapter title from frontmatter
- Colors: Series-specific (see `SERIES_COLORS` in generator script)

**Usage**: Automatically referenced in `og:image` and `twitter:image` meta tags

**Generation Workflow**:

1. Create or edit chapter markdown file
2. Run: `node scripts/generate-social-images.js`
3. Review generated image in `docs/public/social/`
4. Commit image with chapter: `git add docs/public/social/ docs/series/...`

**Important**: Images are **pre-generated** and version-controlled, not dynamically created on deploy.

### 2. Open Graph & Twitter Cards

Automatically injected meta tags:

```html
<meta property="og:title" content="Chapter Title" />
<meta property="og:description" content="Chapter description" />
<meta property="og:url" content="https://codewithphp.com/..." />
<meta property="og:image" content="https://codewithphp.com/social/..." />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta name="twitter:card" content="summary_large_image" />
```

### 3. Canonical URLs

Every chapter gets a canonical URL:

```html
<link
  rel="canonical"
  href="https://codewithphp.com/series/{series}/chapters/{slug}"
/>
```

### 4. Structured Data (Schema.org JSON-LD)

**For Chapter Pages**: Two schemas auto-generated

1. **LearningResource** schema:

```json
{
  "@type": "LearningResource",
  "@id": "https://codewithphp.com/...",
  "name": "Chapter Title",
  "learningResourceType": "Tutorial",
  "educationalLevel": "Beginner|Intermediate|Advanced",
  "timeRequired": "PT30M",
  "teaches": ["..."],
  "isPartOf": {
    "@type": "Course",
    "name": "Series Name"
  }
}
```

2. **BreadcrumbList** schema:

```json
{
  "@type": "BreadcrumbList",
  "itemListElement": [
    { "position": 1, "name": "Home", "item": "https://codewithphp.com" },
    { "position": 2, "name": "Series", "item": "..." },
    { "position": 3, "name": "Chapter", "item": "..." }
  ]
}
```

## SEO Utilities Reference

The following utilities power the automatic SEO features:

### Files

- **`docs/.vitepress/config.ts`**: `transformHead` hook injects per-page meta tags
- **`docs/.vitepress/theme/utils/seo.ts`**: Helper functions for paths and metadata
- **`docs/.vitepress/theme/composables/useStructuredData.ts`**: Schema.org generators
- **`docs/.vitepress/theme/composables/useBreadcrumb.ts`**: Breadcrumb schema
- **`scripts/generate-social-images.js`**: Social image generator

### Key Functions

```typescript
// Get social image path for a chapter
generateSocialImagePath(pageData) → string

// Get canonical URL
getCanonicalUrl(relativePath) → string

// Generate LearningResource schema
generateLearningResourceSchema(pageData) → object

// Generate BreadcrumbList schema
generateBreadcrumbSchema(pageData) → object
```

## SEO Validation Checklist

Before publishing a new chapter, verify:

- [ ] **Frontmatter complete**: title, description, series, chapter, difficulty
- [ ] **Description is concise**: One sentence, no period at end
- [ ] **Title follows format**: "NN: Chapter Title" with zero-padded number
- [ ] **Generate social image**: Run `node scripts/generate-social-images.js`
- [ ] **Social image exists**: Verify `/docs/public/social/{series}-chapter-{nn}.jpg` created
- [ ] **Commit social image**: `git add docs/public/social/`
- [ ] **Build succeeds**: Run `npm run docs:build` locally
- [ ] **Test social sharing**: Use Facebook Debugger or Twitter Card Validator
- [ ] **Validate structured data**: Use Google Rich Results Test

### Generation & Build Commands

```bash
# 1. Generate social images for new/updated chapters
node scripts/generate-social-images.js

# 2. Review generated images
ls -lh docs/public/social/

# 3. Add images to git
git add docs/public/social/

# 4. Build and verify
npm run docs:build

# 5. Check meta tags in output
grep -E 'og:|twitter:|canonical' docs/.vitepress/dist/series/*/chapters/*.html
```

## Testing Tools

### Online Validators

1. **Google Rich Results Test**

   - URL: https://search.google.com/test/rich-results
   - Validates LearningResource and BreadcrumbList schemas

2. **Facebook Sharing Debugger**

   - URL: https://developers.facebook.com/tools/debug/
   - Tests Open Graph tags and social images

3. **Twitter Card Validator**

   - URL: https://cards-dev.twitter.com/validator
   - Validates Twitter Card rendering

4. **Schema.org Validator**
   - URL: https://validator.schema.org/
   - Validates JSON-LD structured data

## Common Issues & Solutions

### Social Image Not Generating

**Problem**: Image file not created for new chapter

**Solution**:

1. Verify frontmatter has `series` and `chapter` fields
2. Run generator manually: `node scripts/generate-social-images.js`
3. Check chapter number is numeric (not "15b" vs 15.5)
4. For special chapters like "15b", update generator script

### Structured Data Errors

**Problem**: Google Rich Results Test shows errors

**Solution**:

1. Check frontmatter is valid YAML (proper indentation)
2. Ensure `teaches` is an array, not a string
3. Verify `estimatedTime` uses ISO 8601 format (PT30M, not "30 minutes")
4. Review schema generation in `useStructuredData.ts`

### Missing Meta Tags

**Problem**: Open Graph tags not appearing in HTML

**Solution**:

1. Verify `transformHead` hook is present in config.ts
2. Check that imports are correct (seo.ts, useStructuredData.ts)
3. Rebuild: `npm run docs:build`
4. Check build logs for TypeScript errors

## GenAI Optimization Notes

Chapters are automatically optimized for AI search engines:

- **Robots meta**: `index, follow, max-image-preview:large`
- **Article metadata**: published_time, modified_time, author
- **Keywords**: From frontmatter or auto-generated
- **Structured context**: Schema.org provides rich context for AI understanding

### Supported AI Crawlers

The following bots can crawl and index content (per robots.txt):

- GPTBot (OpenAI/SearchGPT)
- Claude-Web (Anthropic)
- PerplexityBot
- CCBot (Common Crawl)
- Bytespider (ByteDance)

## Series-Specific SEO Considerations

### PHP Basics Series

- **Social image colors**: Purple-blue gradient
- **Target keywords**: "PHP tutorial", "learn PHP", "PHP 8.4"
- **Educational level**: Primarily "Beginner"
- **Course workload**: "PT25H" (25 hours)

### AI/ML for PHP Developers Series

- **Social image colors**: Blue gradient
- **Target keywords**: "PHP machine learning", "AI PHP", "ML tutorial"
- **Educational level**: "Intermediate" to "Advanced"
- **Course workload**: "PT40H" (40 hours)

## Best Practices

### Writing SEO-Friendly Descriptions

✅ **Good**: "Learn to build RESTful APIs in PHP with proper authentication and error handling"

❌ **Bad**: "This chapter teaches you about APIs"

### Choosing Keywords

✅ **Good**: `["REST API PHP", "API authentication", "JSON responses", "PHP 8.4"]`

❌ **Bad**: `["API", "web", "code", "programming"]`

### Defining Learning Outcomes

✅ **Good**: `teaches: ["HTTP methods (GET, POST, PUT, DELETE)", "JWT authentication", "API versioning strategies"]`

❌ **Bad**: `teaches: ["APIs", "authentication"]`

## Documentation References

For more details on the SEO implementation:

- **Complete implementation**: `SEO-IMPLEMENTATION.md`
- **Testing guide**: `SEO-TESTING-GUIDE.md`
- **Overview**: `SEO-SUMMARY.md`
- **Authoring guidelines**: [authoring-guidelines.mdc](mdc:.cursor/rules/authoring-guidelines.mdc)
- **Global tutorial standards**: [tutorials-global.mdc](mdc:.cursor/rules/tutorials-global.mdc)

## Maintenance

### When Adding New Series

1. Add series colors to `scripts/generate-social-images.js` (`SERIES_COLORS`)
2. Add series metadata to `useStructuredData.ts` (`getSeriesData()`)
3. Update series display names in `seo.ts` (`getSeriesDisplayName()`)
4. Generate social images: `node scripts/generate-social-images.js`

### When Modifying SEO Logic

1. Edit relevant utility files (`seo.ts`, `useStructuredData.ts`)
2. Test with sample chapter: `npm run docs:build`
3. Validate with online tools (Rich Results Test, etc.)
4. Update documentation if behavior changes

---

**Last Updated**: October 28, 2025  
**SEO Score Target**: 95+ (Lighthouse)  
**Social Images Generated**: 53+

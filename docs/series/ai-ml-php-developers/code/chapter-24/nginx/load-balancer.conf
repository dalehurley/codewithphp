# Load Balancer Configuration for AI-ML Service
# Multiple application instances with health checks and failover

upstream php_backend {
    # Load balancing method
    least_conn;  # Route to server with fewest connections

    # Backend servers
    server app1:8000 max_fails=3 fail_timeout=30s weight=1;
    server app2:8000 max_fails=3 fail_timeout=30s weight=1;
    server app3:8000 max_fails=3 fail_timeout=30s weight=1;

    # Backup server (only used if all primary servers fail)
    # server app-backup:8000 backup;

    # Keep-alive connections to backends
    keepalive 32;
}

# Health check configuration
map $request_uri $is_health_check {
    default 0;
    ~^/health 1;
}

server {
    listen 80;
    server_name _;

    # Access logging (exclude health checks)
    access_log /var/log/nginx/access.log combined if=$is_health_check;
    error_log /var/log/nginx/error.log warn;

    # Client body size limits (for prediction payloads)
    client_max_body_size 10M;
    client_body_buffer_size 128k;

    # Health check endpoint
    location /health {
        proxy_pass http://php_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";

        # Short timeouts for health checks
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;

        # Don't log health checks
        access_log off;

        # Add health check headers
        add_header X-Health-Check "true";
    }

    # API endpoints - main traffic
    location /api/ {
        proxy_pass http://php_backend;
        proxy_http_version 1.1;

        # Headers for backend
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";

        # Timeouts for ML inference (can be slow)
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;

        # Error handling and failover
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;

        # Add load balancer info to response
        add_header X-Upstream-Server $upstream_addr always;
        add_header X-Response-Time $upstream_response_time always;
    }

    # WebSocket support (if needed for real-time updates)
    location /ws {
        proxy_pass http://php_backend;
        proxy_http_version 1.1;

        # WebSocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;

        # Longer timeouts for WebSocket
        proxy_connect_timeout 60s;
        proxy_send_timeout 3600s;
        proxy_read_timeout 3600s;
    }

    # Monitoring dashboard (restrict access)
    location /monitoring/ {
        # Allow only from specific IPs (adjust as needed)
        allow 127.0.0.1;
        allow 10.0.0.0/8;  # Private network
        deny all;

        proxy_pass http://php_backend;
        proxy_http_version 1.1;
    }

    # Metrics endpoint (restrict access)
    location /metrics {
        # Allow only from monitoring systems
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        deny all;

        proxy_pass http://php_backend;
        proxy_http_version 1.1;

        # Prometheus scraping timeout
        proxy_read_timeout 10s;
    }

    # Static files (if any)
    location /static/ {
        alias /var/www/static/;
        expires 1d;
        add_header Cache-Control "public, immutable";
    }

    # Default response
    location / {
        return 404 '{"error": "Not Found", "message": "The requested endpoint does not exist"}';
        add_header Content-Type application/json;
    }

    # Custom error pages
    error_page 502 503 504 /50x.json;
    location = /50x.json {
        return 503 '{"error": "Service Unavailable", "message": "The service is temporarily unavailable. Please try again later."}';
        add_header Content-Type application/json;
        internal;
    }
}

# HTTPS configuration (enable after SSL cert is obtained)
# server {
#     listen 443 ssl http2;
#     server_name yourdomain.com;
#
#     # SSL certificates
#     ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
#
#     # SSL configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
#     ssl_prefer_server_ciphers off;
#
#     # SSL session caching
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     ssl_session_tickets off;
#
#     # OCSP stapling
#     ssl_stapling on;
#     ssl_stapling_verify on;
#     ssl_trusted_certificate /etc/letsencrypt/live/yourdomain.com/chain.pem;
#
#     # Security headers
#     add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
#     add_header X-Content-Type-Options "nosniff" always;
#     add_header X-Frame-Options "SAMEORIGIN" always;
#     add_header X-XSS-Protection "1; mode=block" always;
#
#     # Include all location blocks from HTTP server
#     include /etc/nginx/conf.d/locations.conf;
# }
#
# # HTTP to HTTPS redirect
# server {
#     listen 80;
#     server_name yourdomain.com;
#
#     location /.well-known/acme-challenge/ {
#         root /var/www/certbot;
#     }
#
#     location / {
#         return 301 https://$server_name$request_uri;
#     }
# }

